{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SACAC,SAASC,iBAAiB,oBAAoB,KAC5C,MAAMC,EAAOF,SAASG,cAAc,SA+BpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAtCbJ,EAAKD,iBAAiB,UAAWY,IAC/BA,EAAMC,iBAEN,MAAMC,EAAaf,SAASG,cAAc,uBACpCa,EAAYhB,SAASG,cAAc,sBACnCc,EAAcjB,SAASG,cAAc,wBAErCe,EAAQC,SAASJ,EAAWK,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,OAE9BG,EAAW,GACjB,IAAK,IAAIC,EAAI,EAAGA,GAAKF,EAAQE,IAC3BD,EAASE,KAAKrB,EAAcoB,EAAGN,GAASM,EAAI,GAAKH,IAGnDE,EAASG,SAASC,IAChBA,EACGC,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEzE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoB5B,QAAeC,MAAU,GACrE,IAGNJ,EAAKgC,OAAO,G","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from \"notiflix\";\ndocument.addEventListener('DOMContentLoaded', () => {\n  const form = document.querySelector('.form');\n\n  form.addEventListener('submit', (event) => {\n    event.preventDefault();\n\n    const delayInput = document.querySelector('input[name=\"delay\"]');\n    const stepInput = document.querySelector('input[name=\"step\"]');\n    const amountInput = document.querySelector('input[name=\"amount\"]');\n\n    const delay = parseInt(delayInput.value);\n    const step = parseInt(stepInput.value);\n    const amount = parseInt(amountInput.value);\n\n    const promises = [];\n    for (let i = 1; i <= amount; i++) {\n      promises.push(createPromise(i, delay + (i - 1) * step));\n    }\n\n    promises.forEach((promise) => {\n      promise\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    });\n\n    form.reset();\n  });\n\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const shouldResolve = Math.random() > 0.3;\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }\n});\n"],"names":["$7Y9D8","parcelRequire","document","addEventListener","form","querySelector","createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","event","preventDefault","delayInput","stepInput","amountInput","delay1","parseInt","value","step","amount","promises","i","push","forEach","promise","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.47daa754.js.map"}